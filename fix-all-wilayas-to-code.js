const mongoose = require('mongoose');
const Agence = require('./backend/models/Agence');
const Wilaya = require('./backend/models/Wilaya');
const FraisLivraison = require('./backend/models/FraisLivraison');

async function fixAllWilayasToCode() {
    try {
        await mongoose.connect('mongodb://localhost:27017/logistique');
        console.log('‚úÖ Connect√© √† MongoDB\n');

        // 1. Charger toutes les wilayas avec leurs codes
        const wilayas = await Wilaya.find({});
        console.log(`üìã ${wilayas.length} wilayas charg√©es\n`);

        // Cr√©er un Map nom ‚Üí code
        const nomToCode = new Map();
        wilayas.forEach(w => {
            nomToCode.set(w.nom.toLowerCase(), w.code);
            nomToCode.set(w.code, w.code); // Si d√©j√† un code, garder le code
        });

        console.log('üîç V√âRIFICATION DES AGENCES:\n');
        console.log('‚îÄ'.repeat(80));

        // 2. V√©rifier et corriger les agences
        const agences = await Agence.find({});
        let agencesCorrigees = 0;
        let agencesOK = 0;

        for (const agence of agences) {
            const wilayaActuelle = agence.wilaya;
            const isCode = /^\d{1,2}$/.test(wilayaActuelle);

            if (isCode) {
                console.log(`‚úÖ ${agence.nom}: wilaya="${wilayaActuelle}" (d√©j√† un code)`);
                agencesOK++;
            } else {
                // Trouver le code correspondant
                const code = nomToCode.get(wilayaActuelle.toLowerCase());
                
                if (code) {
                    agence.wilaya = code;
                    agence.wilayaText = wilayaActuelle; // Sauvegarder le nom dans wilayaText
                    await agence.save();
                    console.log(`üîß ${agence.nom}: "${wilayaActuelle}" ‚Üí "${code}" (corrig√©)`);
                    agencesCorrigees++;
                } else {
                    console.log(`‚ùå ${agence.nom}: wilaya="${wilayaActuelle}" (code introuvable!)`);
                }
            }
        }

        console.log('‚îÄ'.repeat(80));
        console.log(`\nüìä R√âSUM√â AGENCES:`);
        console.log(`   ‚úÖ D√©j√† correctes: ${agencesOK}`);
        console.log(`   üîß Corrig√©es: ${agencesCorrigees}`);

        // 3. V√©rifier les frais de livraison
        console.log('\nüîç V√âRIFICATION DES FRAIS DE LIVRAISON:\n');
        console.log('‚îÄ'.repeat(80));

        const frais = await FraisLivraison.find({});
        let fraisOK = 0;
        let fraisProbleme = 0;

        frais.forEach(f => {
            const sourceOK = /^\d{1,2}$/.test(f.wilayaSource);
            const destOK = /^\d{1,2}$/.test(f.wilayaDest);

            if (sourceOK && destOK) {
                console.log(`‚úÖ ${f.wilayaSource} ‚Üí ${f.wilayaDest} (OK)`);
                fraisOK++;
            } else {
                console.log(`‚ùå ${f.wilayaSource} ‚Üí ${f.wilayaDest} (format incorrect!)`);
                fraisProbleme++;
            }
        });

        console.log('‚îÄ'.repeat(80));
        console.log(`\nüìä R√âSUM√â FRAIS:`);
        console.log(`   ‚úÖ Corrects: ${fraisOK}`);
        console.log(`   ‚ùå Probl√®mes: ${fraisProbleme}`);

        // 4. R√©sum√© final
        console.log('\n' + '‚ïê'.repeat(80));
        console.log('üéØ R√âSUM√â FINAL:');
        console.log('‚ïê'.repeat(80));
        console.log(`\n‚úÖ Agences corrig√©es: ${agencesCorrigees}`);
        console.log(`‚úÖ Agences OK: ${agencesOK}`);
        console.log(`‚úÖ Total agences: ${agences.length}`);
        console.log(`\n‚úÖ Frais OK: ${fraisOK}`);
        console.log(`‚ùå Frais avec probl√®mes: ${fraisProbleme}`);
        console.log(`‚úÖ Total frais: ${frais.length}`);

        if (agencesCorrigees > 0) {
            console.log('\nüéâ SUCC√àS! Les agences ont √©t√© corrig√©es pour utiliser les codes de wilaya.');
            console.log('üìù Le champ "wilayaText" contient maintenant le nom pour affichage.');
        }

        if (fraisProbleme > 0) {
            console.log('\n‚ö†Ô∏è  ATTENTION: Certains frais de livraison utilisent un format incorrect.');
            console.log('   Veuillez les corriger manuellement dans la section "Frais de Livraison".');
        }

        console.log('\nüí° RECOMMANDATION:');
        console.log('   Rechargez la page Admin pour voir les changements.');

        await mongoose.connection.close();
        process.exit(0);
    } catch (error) {
        console.error('‚ùå Erreur:', error);
        process.exit(1);
    }
}

fixAllWilayasToCode();
