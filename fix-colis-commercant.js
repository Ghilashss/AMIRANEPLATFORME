const mongoose = require('mongoose');

// Connexion √† MongoDB
mongoose.connect('mongodb://localhost:27017/platforme-livraison', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

const db = mongoose.connection;

db.on('error', console.error.bind(console, '‚ùå Erreur de connexion MongoDB:'));
db.once('open', async function() {
  console.log('‚úÖ Connect√© √† MongoDB');
  
  try {
    // R√©cup√©rer tous les colis cr√©√©s par des commer√ßants
    const colis = await db.collection('colis').find({
      createdBy: 'commercant'
    }).toArray();
    
    console.log(`\nüì¶ ${colis.length} colis cr√©√©s par des commer√ßants trouv√©s\n`);
    
    if (colis.length === 0) {
      console.log('Aucun colis √† corriger.');
      process.exit(0);
    }
    
    let corriges = 0;
    
    for (const c of colis) {
      console.log(`\nüì¶ Colis: ${c.tracking}`);
      console.log(`   Agence actuelle: ${c.agence}`);
      console.log(`   BureauSource actuel: ${c.bureauSource || 'NON D√âFINI'}`);
      
      // Si bureauSource n'est pas d√©fini, le mettre = agence
      if (!c.bureauSource && c.agence) {
        const result = await db.collection('colis').updateOne(
          { _id: c._id },
          { $set: { bureauSource: c.agence } }
        );
        
        if (result.modifiedCount > 0) {
          console.log(`   ‚úÖ BureauSource mis √† jour: ${c.agence}`);
          corriges++;
        }
      } else if (c.bureauSource) {
        console.log(`   ‚ÑπÔ∏è  BureauSource d√©j√† d√©fini, pas de modification`);
      } else {
        console.log(`   ‚ö†Ô∏è  Pas d'agence d√©finie, impossible de corriger`);
      }
    }
    
    console.log(`\n‚úÖ ${corriges} colis corrig√©s`);
    console.log('\nüîç V√©rification finale...\n');
    
    // Afficher les colis mis √† jour
    const colisUpdated = await db.collection('colis').find({
      createdBy: 'commercant'
    }).toArray();
    
    colisUpdated.forEach(c => {
      console.log(`${c.tracking} | Agence: ${c.agence} | BureauSource: ${c.bureauSource || 'NON D√âFINI'}`);
    });
    
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
    process.exit(1);
  }
});
